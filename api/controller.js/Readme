DEVICE CONFIGRATION :
options for device configuration, including device type, services, time scheduler, SMS alert preferences, and SMS grouping, you can create a flexible data model and associated APIs. Here's a suggested structure

1. Data Model:

a. Device Configuration Schema:

{
  "deviceId": "string",
  "deviceType": "string",
  "services": ["string"],
  "timeScheduler": {
    "startTime": "string",
    "endTime": "string"
  },
  "smsAlert": {
    "email": "boolean",
    "sms": "boolean",
    "whatsapp": "boolean"
  },
  "smsGrouping": {
    "groupName": "string",
    "recipients": ["string"],
    "message": "string"
  }
}


2. API Endpoints:
a. Save Device Configuration:
Method: POST
Endpoint: /api/devices/config
Request Payload: Device configuration object
Response: Success or error message
b. Get Device Configuration:
Method: GET
Endpoint: /api/devices/config/:deviceId
Response: Device configuration object for the specified device ID

3. Client-Side Structure:
a. Device Configuration Form:
Device Type: Dropdown/select input.
Services: Checkbox/radio inputs for selecting services.
Time Scheduler: Start time and end time inputs.
SMS Alert: Checkboxes or toggle buttons for email, SMS, and WhatsApp alert preferences.
SMS Grouping: Text inputs for group name, recipients, and message.
b. Client-Side Logic:
Collect user inputs from the configuration form.
Structure the data according to the defined schema.
Send a POST request to the /api/devices/config endpoint with the device configuration data when the user submits the form.
Optionally, fetch and display existing device configurations using a GET request to the /api/devices/config/:deviceId endpoint.
Implement error handling and feedback to the user for successful configuration saves or any encountered errors.


Example Code (Client-Side):

// Example code to send device configuration data to the server

const saveDeviceConfig = (configData) => {
  fetch('/api/devices/config', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(configData),
  })
  .then(response => {
    if (response.ok) {
      console.log('Device configuration saved successfully');
      // Optionally, perform any UI updates or redirects upon successful save
    } else {
      throw new Error('Failed to save device configuration');
    }
  })
  .catch(error => {
    console.error('Error saving device configuration:', error.message);
    // Optionally, display an error message to the user
  });
};

// Example code to fetch device configuration data from the server

const fetchDeviceConfig = (deviceId) => {
  fetch(`/api/devices/config/${deviceId}`)
  .then(response => response.json())
  .then(data => {
    console.log('Device configuration:', data);
    // Optionally, update the UI with the fetched device configuration
  })
  .catch(error => {
    console.error('Error fetching device configuration:', error.message);
    // Optionally, display an error message to the user
  });
};


CREATE TABLE device_configurations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    deviceId VARCHAR(255) NOT NULL,
    deviceType VARCHAR(255),
    services JSON,
    startTime TIME,
    endTime TIME,
    emailAlert BOOLEAN,
    smsAlert BOOLEAN,
    whatsappAlert BOOLEAN,
    smsGrouping JSON
);
id: Auto-increment primary key for unique identification of each configuration.
deviceId: Device identifier to associate the configuration with a specific device.
deviceType: Type of the device (e.g., sensor, camera, etc.).
services: JSON field to store an array of selected services.
startTime: Start time for the time scheduler.
endTime: End time for the time scheduler.
emailAlert: Boolean field indicating whether email alert is enabled.
smsAlert: Boolean field indicating whether SMS alert is enabled.
whatsappAlert: Boolean field indicating whether WhatsApp alert is enabled.
smsGrouping: JSON field to store SMS grouping information.



// Assuming you have established a database connection
const connection = require('../db/connection');

// Function to save device configuration to the database
const saveDeviceConfiguration = (configData) => {
  const { deviceId, deviceType, services, startTime, endTime, emailAlert, smsAlert, whatsappAlert, smsGrouping } = configData;

  const query = `INSERT INTO device_configurations (deviceId, deviceType, services, startTime, endTime, emailAlert, smsAlert, whatsappAlert, smsGrouping)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`;

  connection.query(query, [deviceId, deviceType, JSON.stringify(services), startTime, endTime, emailAlert, smsAlert, whatsappAlert, JSON.stringify(smsGrouping)], (error, results) => {
    if (error) {
      console.error('Error saving device configuration:', error);
      // Handle error, e.g., send error response to client
    } else {
      console.log('Device configuration saved successfully');
      // Send success response to client
    }
  });
};

// Example usage:
const configData = {
  deviceId: 'device123',
  deviceType: 'sensor',
  services: ['temperature', 'humidity'],
  startTime: '08:00:00',
  endTime: '18:00:00',
  emailAlert: true,
  smsAlert: true,
  whatsappAlert: false,
  smsGrouping: {
    groupName: 'Group A',
    recipients: ['user1', 'user2'],
    message: 'Alert: Device threshold exceeded'
  }
};

saveDeviceConfiguration(configData);

DeviceConfiguration:

 implement a task queue system that manages tasks to save configurations to both the database and the JSON file sequentially. When the Python developer comes online, the system dequeues tasks to send JSON data to them. Here's how you can structure your code to accomplish this:

 1. Task Queue System:
Implement a task queue system using a library like async or queue.

2. Database and JSON File Operations:
Enqueue tasks to save configurations to both the database and the JSON file sequentially.
Ensure that tasks are executed in sequence to maintain consistency between the database and the JSON file.

3. Sending JSON Data to Python Developer:
Implement a mechanism to detect when the Python developer comes online.
Dequeue tasks to send JSON data to the Python developer when they are online.
Clear the JSON file in parallel once the data has been successfully sent.


Example Implementation:
javascript
Copy code
const async = require('async');
const fs = require('fs');
const axios = require('axios');

// Initialize task queue
const queue = async.queue(async (task, callback) => {
    try {
        // Save to database
        await saveToDatabase(task);
        // Save to JSON file
        await saveToJSONFile(task);
        callback();
    } catch (error) {
        console.error('Error processing task:', error);
        callback(error);
    }
}, 1); // Concurrency set to 1 for sequential execution

// Function to save configuration to the database
const saveToDatabase = async (config) => {
    // Your database save logic here
    console.log('Saved to database:', config);
};

// Function to save configuration to JSON file
const saveToJSONFile = async (config) => {
    await fs.promises.appendFile('configurations.json', JSON.stringify(config) + '\n');
    console.log('Saved to JSON file:', config);
};

// Function to send JSON data to Python developer
const sendJSONDataToPython = async () => {
    try {
        const jsonData = await fs.promises.readFile('configurations.json', 'utf8');
        // Send JSON data to Python developer's API
        await axios.post('python-developer-api-url', { data: jsonData });
        console.log('JSON data sent to Python developer');
        // Clear JSON file
        await clearJSONFile();
    } catch (error) {
        console.error('Error sending JSON data to Python developer:', error);
    }
};

// Function to clear JSON file
const clearJSONFile = async () => {
    await fs.promises.truncate('configurations.json', 0);
    console.log('JSON file cleared');
};

// Function to enqueue task
const enqueueTask = (config) => {
    queue.push(config);
};

// Simulated example usage
const config1 = { deviceId: 'device1', deviceType: 'type1', startTime: '08:00', endTime: '18:00' };
const config2 = { deviceId: 'device2', deviceType: 'type2', startTime: '09:00', endTime: '17:00' };

enqueueTask(config1);
enqueueTask(config2);

// Simulated check for Python developer online status and sending JSON data
const isPythonDeveloperOnline = true; // Simulated value
if (isPythonDeveloperOnline) {
    sendJSONDataToPython();
}


clear jshon file 
 JSON file is cleared only after the Python developer successfully receives the data, you'll need to modify the code flow slightly. You can clear the JSON file after the successful completion of the API call to the Python developer's endpoint. Here's how you can structure your code to accomplish this:


 const async = require('async');
const fs = require('fs');
const axios = require('axios');

// Initialize task queue
const queue = async.queue(async (task, callback) => {
    try {
        // Save to database
        await saveToDatabase(task);
        // Save to JSON file
        await saveToJSONFile(task);
        callback();
    } catch (error) {
        console.error('Error processing task:', error);
        callback(error);
    }
}, 1); // Concurrency set to 1 for sequential execution

// Function to save configuration to the database
const saveToDatabase = async (config) => {
    // Your database save logic here
    console.log('Saved to database:', config);
};

// Function to save configuration to JSON file
const saveToJSONFile = async (config) => {
    await fs.promises.appendFile('configurations.json', JSON.stringify(config) + '\n');
    console.log('Saved to JSON file:', config);
};

// Function to send JSON data to Python developer
const sendJSONDataToPython = async () => {
    try {
        const jsonData = await fs.promises.readFile('configurations.json', 'utf8');
        // Send JSON data to Python developer's API
        await axios.post('python-developer-api-url', { data: jsonData });
        console.log('JSON data sent to Python developer');
        // Clear JSON file after successful send
        await clearJSONFile();
    } catch (error) {
        console.error('Error sending JSON data to Python developer:', error);
    }
};

// Function to clear JSON file
const clearJSONFile = async () => {
    await fs.promises.truncate('configurations.json', 0);
    console.log('JSON file cleared');
};

// Function to enqueue task
const enqueueTask = (config) => {
    queue.push(config, (error) => {
        if (!error) {
            // Task completed successfully, check if Python developer is online to send JSON data
            const isPythonDeveloperOnline = true; // Simulated value, replace with actual check
            if (isPythonDeveloperOnline) {
                sendJSONDataToPython();
            }
        }
    });
};

// Simulated example usage
const config1 = { deviceId: 'device1', deviceType: 'type1', startTime: '08:00', endTime: '18:00' };
const config2 = { deviceId: 'device2', deviceType: 'type2', startTime: '09:00', endTime: '17:00' };

enqueueTask(config1);
enqueueTask(config2);


The sendJSONDataToPython function sends the JSON data to the Python developer's API endpoint.
After successfully sending the JSON data, the clearJSONFile function is called to clear the JSON file.
The enqueueTask function now also checks if the Python developer is online after a task completes successfully. If the developer is online, it immediately triggers the process to send JSON data to them.
This ensures that the JSON file is cleared only after the successful completion of sending data to the Python developer. Adjust the isPythonDeveloperOnline condition according to your actual logic for checking the developer's online status.



NODE MAILLER

const express = require('express');
const bodyParser = require('body-parser');
const nodemailer = require('nodemailer');

const app = express();
app.use(bodyParser.json());

// API endpoint to receive data about detected person
app.post('/person-detected', async (req, res) => {
    const { image, message, time, userPhoneNumber } = req.body;

    // Process the received data
    const smsMessage = `Person detected at ${time}: ${message}`;

    try {
        // Send SMS alert to user
        await sendSMS(userPhoneNumber, smsMessage);
        res.status(200).send('SMS alert sent successfully');
    } catch (error) {
        console.error('Error sending SMS alert:', error);
        res.status(500).send('Failed to send SMS alert');
    }
});

// Function to send SMS using Node Mailer
const sendSMS = async (phoneNumber, message) => {
    // Create a nodemailer transporter using SMTP
    const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
            user: 'your-email@gmail.com', // Your Gmail email address
            pass: 'your-gmail-password' // Your Gmail password
        }
    });

    // Define email options
    const mailOptions = {
        from: 'your-email@gmail.com', // Your Gmail email address
        to: `${phoneNumber}@sms.gateway.com`, // Concatenate with SMS gateway domain
        subject: '', // Subject is not used for SMS
        text: message // SMS message content
    };

    // Send the SMS
    await transporter.sendMail(mailOptions);
};

// Start the server
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server started on port ${PORT}`);
});
